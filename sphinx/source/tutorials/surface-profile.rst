.. _surface-profile-label:

Adsorption of ethanol
*********************

.. container:: hatnote

    Free energy profile of a gas of ethanol near a solid surface

.. figure:: figures/surfaceprofile/avatar-light.png
    :height: 250
    :alt: Figure showing ethanol molecules adsorbed at the NaCl(100) surface.
    :class: only-light
    :align: right

.. figure:: figures/surfaceprofile/avatar-dark.png
    :height: 250
    :alt: Figure showing ethanol molecules adsorbed at the NaCl(100) surface.
    :class: only-dark
    :align: right

..  container:: justify

    The objective of this tutorial is to build a molecular
    dynamics system made of a flat crystal wall (NaCl) and
    ethanol molecules. The molecule topology files will be downloaded from
    the |ATB_repository|.

.. |ATB_repository| raw:: html

   <a href="https://atb.uq.edu.au/" target="_blank">ATB repository</a>

.. include:: ../contact/recommand-lj.rst

.. include:: ../contact/needhelp.rst

Download ATB molecule
=====================

..  container:: justify

    We first need to download the molecule structure and force
    field information from the Automated Topology Builder (ATB)
    and repository.

    You can skip the creation of the system and go directly to
    the `molecular dynamics <#equilibrium>`__ part by
    downloading the input data file |data_ethanol|.

    Create a EthanolMolecule/ folder.

    Go to the |ATB_repository| website (you will
    need to register). Then go to Existing Molecules, choose a
    molecule. I am choosing an |ethanol_molecule|,
    but you can choose another one (at your own risk) and follow
    this tutorial. Then, click on Molecular Dynamics (MD) Files,
    choose LAMMPS format, and download the |GROMOS_force_field|
    and the |all-atom_moltemplate|
    files into the EthanolMolecule/ folder.

    Inside the moltemplate file, there is an example of
    *system.lt* allowing for the creation of LAMMPS input
    file. Copy past it, and create a |download_system.lt|
    file that looks like that:

.. |data_ethanol| raw:: html

   <a href="../../../../inputs/freeenergy/SurfaceProfile/data.lammps" target="_blank">here</a>

.. |ethanol_molecule| raw:: html

   <a href="https://atb.uq.edu.au/molecule.py?molid=514352#panel-md" target="_blank">ethanol molecule</a>

.. |GROMOS_force_field| raw:: html

   <a href="../../../../inputs/freeenergy/SurfaceProfile/EthanolMolecule/GROMOS_54A7_ATB.lt" target="_blank">GROMOS force field</a>

.. |all-atom_moltemplate| raw:: html

   <a href="../../../../inputs/freeenergy/SurfaceProfile/EthanolMolecule/JRA4_allatom_optimized_geometry.lt" target="_blank">all-atom moltemplate</a>

.. |download_system.lt| raw:: html

   <a href="../../../../inputs/freeenergy/SurfaceProfile/EthanolMolecule/system.lt" target="_blank">system.lt</a>

..  code-block:: bw

    # system.lt
    # simulation of a single molecule in a box of size 50x50x50 Angstroms^3

    write_once("Data Boundary") {
    -25.0 25.0 xlo xhi
    -25.0 25.0 ylo yhi
    -25.0 25.0 zlo zhi
    }

    write_once("In Init") {
    # a variable named `cutoff` is required by GROMOS_54A7_ATB.lt
    variable cutoff equal 14.0 # Angstroms
    boundary p p p
    }

    # import the forcefield file
    import "GROMOS_54A7_ATB.lt"
    # import molecule building block file
    import "JRA4_allatom_optimized_geometry.lt"

    # create a single copy of this molecule at position 0,0,0
    mol1 = new JRA4.move(0.0,0.0,0.0)

..  container:: justify

    Run it using |Moltemplate|,

.. |Moltemplate| raw:: html

   <a href="https://www.moltemplate.org/" target="_blank">Moltemplate</a>

..  code-block:: bw

    moltemplate.sh ./system.lt

..  container:: justify

    to generate several LAMMPS input files corresponding to a
    single molecule in vacuum, which you can run using LAMMPS:

..  code-block:: bw

    lmp -in run.in.EXAMPLE

..  container:: justify

    The files generated by moltemplate contain all bonds, angles, etc.,
    information of the *entire* force field, which makes it unpleasant to
    read. 
    
    Let us arrange the data and isolate only the useful
    information. Create four files, named |download_Positions.dat|, |download_Bonds.dat|, |download_Angles.dat|,
    |download_Dihedrals.dat|. Then re-number the atoms
    types, bonds, angles starting from 1. 
    
    For the ethanol molecule, the |download_Bonds.dat| file looks like that:

..  code-block:: lammps

    1 5 1 2
    2 2 2 3
    3 4 3 4
    4 4 3 5
    5 3 3 6
    6 1 6 7
    7 1 6 8
    8 1 6 9

..  container:: justify

    The first column is the bond index, going from 1 to 8 (8 is
    the number of bond for the Ethanol molecule), the second
    column is the identity of the bond. For each bond identity,
    a bond length and energy are given:

..  code-block:: lammps

    bond_coeff 1 349.274 1.0900
    bond_coeff 2 399.792 1.4300
    bond_coeff 3 299.844 1.5200
    bond_coeff 4 349.928 1.1000
    bond_coeff 5 442.161 0.9720

..  container:: justify

    The third and fourth columns of the Bonds.dat file are the
    indexes of the atoms linked together by a bond.

    Sorting out these files is a tedious task, to continue to follow this
    tutorial, you can download these files for ethanol 
    (|download_Positions.dat|, |download_Bonds.dat|, |download_Angles.dat|, and |download_Dihedrals.dat|).
    Alternatively, you can use |atb2lammps|
    script to create a clean initial configuration.

    If you choose another molecule, you may have additional
    impropers contraints, or may not have dihedral constraints. In that
    case you will have to make some modification to the following codes.

.. |download_Positions.dat| raw:: html

   <a href="../../../../inputs/freeenergy/SurfaceProfile/EthanolMolecule/Positions.dat" target="_blank">Positions.dat</a>

.. |download_Bonds.dat| raw:: html

   <a href="../../../../inputs/freeenergy/SurfaceProfile/EthanolMolecule/Bonds.dat" target="_blank">Bonds.dat</a>

.. |download_Angles.dat| raw:: html

   <a href="../../../../inputs/freeenergy/SurfaceProfile/EthanolMolecule/Angles.dat" target="_blank">Angles.dat</a>

.. |download_Dihedrals.dat| raw:: html

   <a href="../../../../inputs/freeenergy/SurfaceProfile/EthanolMolecule/Dihedrals.dat" target="_blank">Dihedrals.dat</a>

.. |atb2lammps| raw:: html

   <a href="https://github.com/simongravelle/atb2lammps" target="_blank">the atb2lammps</a>

Initial configuration
=====================

..  container:: justify

    Here we replicate the ethanol molecule in between two crystal
    walls made of NaCl. Next to the EthanolMolecule/ folder, create another
    folder named NaCl/, and create a file named Positions.dat in it.
    Copy the following lines corresponding to the initial
    positions of 8 NaCl atoms:

..  code-block:: bw
    :caption: *to be copied in NaCl/Positions.dat*

    1 1 1 1 0. 0. 0.
    2 2 2 -1 0. 2.84 0.
    3 3 2 -1 2.84 0. 0.
    4 4 1 1 2.84 2.84 0.
    5 5 2 -1 0. 0. 2.84
    6 6 1 1 0. 2.84 2.84
    7 7 1 1 2.84 0. 2.84
    8 8 2 -1 2.84 2.84 2.84

..  container:: justify

    Then, download this |Python_script|
    next to the EthanolMolecule/ and NaCl/ folders, and run it using

.. |Python_script| raw:: html

   <a href="../../../../inputs/freeenergy/SurfaceProfile/generatedata.py" target="_blank">Python script</a>

..  code-block:: bash

    python3 generatedata.py

..  container:: justify

    to generate the data.lammps file containing the initial
    configuration. This home-made Python script reads the
    position and molecule information for both NaCl and ethanol,
    replicate them, and write a LAMMPS data file. Feel free to
    modify it and add more molecules (or a different molecule).

    To properly insert molecules within a structure using a
    custom script, it is important to detect the positions of
    the neighbor atoms before inserting a molecule, otherwise
    atoms will overlap and LAMMPS will crash.

    The present Python script rotates the molecules to give them
    a random orientation, this step is not really necessary as a
    short molecular dynamics simulation would randomize the
    molecule orientation anyway.

    Let us create a parameter
    file, named PARM.lammps, which contains all the mass and intra/inter 
    molecular interaction parameters:

..  code-block:: lammps
    :caption: *to be copied in PARM.lammps*

    # mass parameters
    mass 1 22.99000
    mass 2 35.45000
    mass 3 12.011
    mass 4 1.008
    mass 5 1.008
    mass 6 12.011
    mass 7 15.9994

    # pair coeffs
    pair_coeff 1 1 0.0552 2.31
    pair_coeff 2 2 0.1004 4.3
    pair_coeff 3 3 0.0663 3.5812
    pair_coeff 4 4 0.0281 2.3734
    pair_coeff 5 5 0.0000 0.0000
    pair_coeff 6 6 0.2450 2.8114
    pair_coeff 7 7 0.1195 3.1000

    # bond coeffs
    bond_coeff 1 349.274 1.0900
    bond_coeff 2 399.792 1.4300
    bond_coeff 3 299.844 1.5200
    bond_coeff 4 349.928 1.1000
    bond_coeff 5 442.161 0.9720

    # angle coeffs
    angle_coeff 1 47.694 109.500
    angle_coeff 2 55.127 109.500
    angle_coeff 3 55.114 111.000
    angle_coeff 4 52.477 107.570
    angle_coeff 5 47.502 108.530
    angle_coeff 6 54.993 110.300

    # dihedral coeffs
    dihedral_coeff 1 0.30115 1 3
    dihedral_coeff 2 1.415 1 3
    dihedral_coeff 3 0.0 1 1
    dihedral_coeff  3 0.0 1 1

..  container:: justify

    Here, atoms of type 1 and 2 are Na and Cl, and atoms 3 to 7 are
    the different hydrogen, oxygen, and carbon atoms of the
    ethanol molecules.

    All the force field values for the ethanol come from
    the ATB, and from the GROMOS force field. The force field
    values for NaCl have been taken from |Loche_paper|
    by Loche et al. The interaction parameters between atoms of
    types i and j will be calculated by LAMMPS using the arithmetic rule.

.. |Loche_paper| raw:: html

   <a href="https://pubs.acs.org/doi/10.1021/acs.jpcb.1c05303" target="_blank">this paper</a>

.. include:: ../contact/supportme.rst

Equilibrium
===========

..  container:: justify

    Using LAMMPS, let us bring the system to equilibrium. Open a
    new text file, name it input.eq.lammps, and copy the
    following lines in it:

..  code-block:: lammps
    :caption: *to be copied in input.eq.lammps*

    # ethanol at a nacl surface
    # variables
    variable pre equal 1 # desired pressure (Atm)
    variable tem equal 300 # desired temperature (K)
    # main parameters
    units real # style of units (A, fs, Kcal/mol)
    atom_style full # molecular + charge
    bond_style harmonic
    angle_style harmonic
    dihedral_style harmonic
    boundary p p p # periodic boundary conditions
    pair_style lj/cut/coul/long 10 # cut-off 1 nm
    kspace_style pppm 1.0e-4
    pair_modify mix arithmetic tail yes # eij = sqrt(ei*ej), dij = 0.5*(di+dj)

..  container:: justify

    The script starts with the definition of two variables:
    temperature and pressure. Then, units are defined, as well
    as atom, bond, angle, and dihedral styles. Periodic boundary
    conditions are used in all directions of space. Atoms
    interact through a Lennard-Jones potential with a cut off at
    1 nm, as well as through long-range Coulomb interactions
    using the particle-particle particle-mesh solver with an
    accuracy of 0.0001. Finally, the arithmetic rule is used to
    control interaction between atoms of different types.

    Then, add the following lines to the script:

..  code-block:: lammps
    :caption: *to be copied in input.eq.lammps*

    # import positions and parameters
    read_data data.lammps
    include PARM.lammps
    # groups # descriptions
    group nacl type 1 2 # nacl wall
    group eth type 3 4 5 6 7 # ethanol molecules
    # dynamics
    timestep 1 # (fs)
    fix mymme nacl momentum 1 linear 1 1 1
    velocity all create ${tem} 4928459 rot yes mom yes dist gaussian
    fix mynpt all npt temp ${tem} ${tem} 100 x ${pre} ${pre} 1000 y ${pre} ${pre} 1000
    # output
    thermo 1000
    dump dp1 all atom 1000 dump.lammpstrj # print every 1 ps
    # run
    run 100000 # 100 ps
    write_data eq.data

..  container:: justify

    The read_data and include commands are used to import the
    previously generated data and parameter files, respectively.
    Then, two groups are defined from the atoms types, and a
    timestep of 1 fs is set. The linear momentum of the NaCl
    block is canceled in all three directions to avoid drifting.
    Initial velocities are given to the atoms , with a starting
    temperature equal to the chosen value of 300 K. An
    anisotropic NPT thermostat is used, with the volume being
    adjusted only along the *x* and *y* directions, and
    not along the *z* direction to avoid the collapse of the two walls.

    Trajectories are printed in a dump file every 1 ps, and
    information to the terminal every 1 ps. The simulation runs
    for 100 ps and finally the final state is printed in the
    eq.data file. You can visualize the trajectory by opening
    the dump file using VMD.

Umbrella sampling
=================

..  container:: justify

    From the previously equilibrated configuration, let us
    perform the umbrella sampling simulation step. To do so, we
    are going to pick one of the ethanol molecule, and force it
    to move along an axis normal to the NaCl surface by adding
    a harmonic potential to it. The actual position of the
    molecule around the center of the harmonic potential will be
    recorded, and used later to reconstruct the free energy
    profile.

    Create another input file, call it
    input.umbrella.lammps, and copy the following lines in it:

..  code-block:: lammps
    :caption: *to be copied in input.umbrella.lammps*

    # ethanol at a nacl surface
    # variables
    variable pre equal 1 # desired pressure (Atm)
    variable tem equal 300 # desired temperature (K)
    variable k1 equal 0.5 # spring constant
    variable k2 equal 5 # spring constant
    # main parameters
    units real # style of units (A, fs, Kcal/mol)
    atom_style full # molecular + charge
    bond_style harmonic
    angle_style harmonic
    dihedral_style harmonic
    boundary p p p # periodic boundary conditions
    pair_style lj/cut/coul/long 10 # cut-off 1 nm
    kspace_style pppm 1.0e-4
    pair_modify mix arithmetic tail yes # eij = sqrt(ei*ej), dij = 0.5*(di+dj)
    # import positions and parameters
    read_data data.npt
    include PARM.lammps
    # groups # descriptions
    group nacl type 1 2 # nacl wall
    group eth type 3 4 5 6 7 # ethanol molecules
    group oxy type 7 # ethanol molecules
    group mol2 molecule 2
    group topull intersect mol2 oxy
    # dynamics
    timestep 1 # (fs)
    fix mynve all nve
    fix mylgv all langevin ${tem} ${tem} 100 1530917
    variable zini equal xcm(nacl,z)
    fix mytth1 nacl spring tether ${k2} NULL NULL ${zini} 0
    # output
    thermo 1000
    dump dp1 all atom 50000 dump.lammpstrj
    # run
    variable zave equal xcm(topull,z)
    variable cpt loop 24
    label loop
    variable zdes equal -20+0.5*(${cpt}-1)
    fix mytth2 topull spring tether ${k1} 0 0 ${zdes} 0
    run 50000
    fix myat1 all ave/time 10 200 2000 v_zave v_zdes file position.${cpt}.dat
    run 500000
    unfix myat1
    next cpt
    jump SELF loop

..  container:: justify

    The first difference between this script and the previous
    one is the definition of two spring constants :math:`k_1` and
    :math:`k_2` that will be used respectively to maintain the
    ethanol molecule, and the nacl wall near given positions. A
    second difference is that new groups have been defined, with
    the group 'topull' being made of one single oxygen atom that
    is part of the chosen ethanol molecule. This group is itself
    build from the intersection between the group 'oxy' made of
    all the oxygen atoms of type 7, and the group 'mol2' made of
    all the atoms of the molecule of index 2 (the wall is index
    1, and the ethanol molecules are indexes 2, 3, 4 etc.).
    Finally, a loop made of 24 iterations is defined, the
    variable *zdes* is the desired position we want to impose to
    the atom of group *topull*, it goes from -20 Å (very close
    to the bottom wall) to -8 Å (far from the wall). The fix
    *mytth2* is used to add the harmonic potential to the atom
    *topull*. Note that the fix *mytth1* is used to prevent the
    NaCl wall for drifting from its original position *zini*.

    Another important difference with the previous step is the use here
    of a Langevin thermostat, which provides better sampling. Some other 
    thermostats can lead to the molecules oscillating continuously within its 
    trapping potential.

    Run the script using LAMMPS. 24 files named position.1.dat,
    position.2.dat... position.24.dat must appear inside the folder. 
    The simulation will take some time.
    
    If you visualize the dump file with VMD, you see one molecule being
    progressively moved out from the wall. The other molecules
    remain unperturbed by the additional harmonic potential and free to diffuse and adsorb.

Building the free energy profile
================================

..  container:: justify

    In order to treat the data, we are going to use the WHAM
    algorithm. You can download and compile the version of |Grossfield_page|.
    In order to apply the WHAM algorithm to our simulation, we
    first need to create a metadata file. This file simply
    contains the paths of the data file, the value of
    :math:`x_\text{des}`, and the values of :math:`k_1` and :math:`k_2`. To generate
    the file more easily, you can run this script using Octave
    (assuming that the wham algorithm is located in the same
    folder as the LAMMPS simulations).

.. |Grossfield_page| raw:: html

   <a href="http://membrane.urmc.rochester.edu/?page_id=126" target="_blank">Alan Grossfield</a>

..  code-block:: bash

    file=fopen('metadata.dat','wt');
    for a=1:24
        X=['./position.',num2str(a),'.dat ',num2str(-20+0.5*(a-1)),' 0.5'];
        fprintf(file,X);
        fprintf(file,'\n');
    end

..  container:: justify

    The generated file named metadata.dat looks like that
    (alternatively you can download it |download_metadata_file|):

.. |download_metadata_file| raw:: html

   <a href="../../../../inputs/freeenergy/SurfaceProfile/metadata.dat" target="_blank">here</a>

..  code-block:: bash

    ./position.1.dat -99 0.0205
    ./position.1.dat -20 0.5
    ./position.2.dat -19.5 0.5
    ./position.3.dat -19 0.5
    ./position.4.dat -18.5 0.5
    (...)
    ./position.23.dat -9 0.5
    ./position.24.dat -8.5 0.5

..  container:: justify

    Then, simply run the following command

..  code-block:: bash

    ./wham -20 -8 160 1e-8 300 0 metadata.dat PMF.dat

..  container:: justify

    where -20 and -8 are the boundaries, 160 the number of bins,
    1e-8 the tolerance, and 300 the temperature. A file named
    PMF.dat has been created, and contains the free energy
    profile in Kcal/mol:

.. figure:: figures/surfaceprofile/freeenergy-light.png
    :alt: Figure showing the PMF calculated by umbrella sampling
    :class: only-light

.. figure:: figures/surfaceprofile/freeenergy-dark.png
    :alt: Figure showing the PMF calculated by umbrella sampling
    :class: only-dark

    Calculated PMF profile normal to the solid wall. The origin :math:`z=0`
    corresponds to the position of the first layer of atoms.

..  container:: justify

    The profile indicates that it is more energetically
    favorable for an ethanol molecule to adsorb at the surface
    rather than remaining far from it, which is consistent with
    what we observe with the unperturbed molecules (they stick
    to the surface). The energy well is about 6.5 kcal/mol,
    which is about :math:`11 \times k_\text{B} T`.

    Notice that even at a distance of 1 nm from the wall, the PMF 
    is not flat, indicating that the ethanol molecule still feels the 
    presence of the wall. This is expected in vacuum, as there is nothing 
    in between the molecule and the wall to screen the interaction.

    Note that if you intent to publish such PMF,
    much longer simulations must be performed.

.. include:: ../contact/accessfile.rst

.. include:: ../contact/contactme.rst

