.. _`graphene-label`:

Graphene under deformation
**************************

..  container:: justify

   This tutorial is part of the *2D materials* series.

.. container:: hatnote

   Longitudinal deformation of a small graphene sheet

.. figure:: ../figures/graphene/graphene_dark.png
    :alt: graphene in vacuum image VMD
    :width: 250
    :align: right
    :class: only-dark

.. figure:: ../figures/graphene/graphene_light.png
    :alt: graphene in vacuum image VMD
    :width: 250
    :align: right
    :class: only-light

..  container:: justify

   In this tutorial, a graphene sheet
   is generated using VMD and topotool, and is then
   deformed using an applied displacement (a method called
   *out-of-equilibrium molecular dynamics*).

Generation of the system
========================

..  container:: justify

   The initial configuration (atoms positions, bonds, angles,
   etc.) is generated using
   `VMD <https://www.ks.uiuc.edu/Research/vmd/>`__. Open VMD,
   and go to Extensions, Modeling, Nanotube Builder. A window
   named Carbon Nanostructures opens up, allowing us to choose
   between generating sheet and nanotube of graphene or BN. For
   this tutorial, let us generate a 4 nm per 4 nm sheet of
   graphene. Simply change the values of "Edge length along x"
   and "Edge length along y" to 4, and click on "Generate
   Sheet(s)". You should something like the image on the right 
   (here I changed the original color a little bit, 
   but that is not necessary).

.. figure:: ../figures/graphene/vmd_dark.png
    :alt: graphene in vacuum image VMD
    :width: 250
    :align: right
    :class: only-dark

.. figure:: ../figures/graphene/vmd_light.png
    :alt: graphene in vacuum image VMD
    :width: 250
    :align: right
    :class: only-light
..  container:: justify

   At this point, this is not a molecular dynamics simulations,
   but a cloud of dots that looks like graphene. 
   In the VMD terminal, set the box
   dimensions by typing the following command in the VMD
   terminal:

..  code-block:: bash
   :caption: *to be written in the VMD terminal*

   molinfo top set a 80  
   molinfo top set b 80            
   molinfo top set c 80 

..  container:: justify

   The values of 80 in each direction have been chosen
   so that the box is much larger than the graphene sheet.

   In order to
   generate the initial LAMMPS data file, let us use Topotool:
   to generate the LAMMPS data file, enter the following command:

..  code-block:: bash
   :caption: *to be written in the VMD terminal*

   topo writelammpsdata carbon.data full

..  container:: justify

   More details about these commands can be found on the
   personal page of `Axel
   Kohlmeyer <https://sites.google.com/site/akohlmey/software/topotools>`__.
   In short, Topotool deduces the location of bonds, angles,
   dihedrals, and impropers from the positions of the atoms,
   and generates a file that can be read by LAMMPS.

..  container:: justify

   The keyword "full" corresponds to the LAMMPS atom full
   style (other possibilities include atomic, bond, charge,
   etc). The parameters of the constraints (bond length,
   dihedral coefficients, etc.) will be given later.

   A new file named "carbon.data" has been created, it starts
   like that:

..  code-block:: bash

   LAMMPS data file. CGCMM style. atom_style full generated by VMD/TopoTools v1.7 on Sat Jan 14 15:44:40 CET 2023
   680 atoms
   983 bonds
   1894 angles
   3665 dihedrals
   608 impropers
   1 atom types
   1 bond types
   1 angle types
   1 dihedral types
   1 improper types
   -20.965628 59.034372  xlo xhi
   -19.438999 60.561001  ylo yhi
   -40.000000 40.000000  zlo zhi

..  container:: justify

   As you can see, the carbon.data file contains information
   about the positions of the carbons atoms, as well as the
   identity of the atoms that are linked by bonds, angles, dihedrals,
   and impropers constraints.

   Save the "carbon.data" file in the same folder as your
   future LAMMPS input script. We are done with the system
   generation, we can start the molecular dynamics simulations.

   Alternatively, you can download the file I did generate 
   by clicking `here <../../../../../../inputs/2Dmaterials/graphene/carbon.data>`__.

LAMMPS input script
===================

..  container:: justify

   Create a new text file and name it "input.lammps". Copy the
   following lines in it:

..  code-block:: bash
   :caption: *to be copied in input.lammps*

   # Initialisation

   variable T equal 300

   units real
   atom_style full
   boundary p p p
   pair_style lj/cut 14

   bond_style harmonic
   angle_style harmonic
   dihedral_style opls
   improper_style harmonic

   special_bonds lj 0.0 0.0 0.5

   # System definition
   read_data carbon.data

..  container:: justify

   Most of these command lines have been seen already in
   previous tutorials (see the bulk fluids series for instance), with a few
   differences: first, the pair style here is lj/cut with
   parameter 14, which means that the atoms closer than 14
   Angstroms from each others interact through a Lennard-Jones
   potential. Notice that there is no Coulombic interaction
   because all the atoms in pure graphene have a charge of 0.
   The bond, angle, dihedral, and improper styles specify the
   different potentials used to restrain the positions of the
   atoms. For more details, have a look at the LAMMPS website
   (see for example the `OPLS dihedral
   style <https://lammps.sandia.gov/doc/dihedral_opls.html>`__).

..  container:: justify

   The last command (read_data) imports the carbon.data file
   previously generated with VMD, which contains the
   information about the box size, atoms positions, etc.

.. container:: remark2

   **About interaction between neighbors atoms:** 
   
   Atoms connected by bond do not typically interact through
   Lennard-Jones interaction. This is ensured here by the
   special_bonds command. The three numbers of the
   special_bonds command are weighting factors for the
   Lennard-Jones interaction between atoms connected by bond
   (respectively directly bounded, separated by two bonds,
   etc.). For instance, the first weighting factor, with a
   value of 0, imposes that two atoms connected by a bond do
   not interact through a Lennard-Jones potential (therefore
   they only interact through bonded potentials).

Parameters for the graphene
===========================

..  container:: justify

   Next, we need to specify the parameters of both bonded and
   non-bonded interactions. Create a new text file in the same
   folder and name it "PARM.lammps". Copy the following lines
   in it:

..  code-block:: bash
   :caption: *to be copied in PARM.lammps*

   pair_coeff 1 1 0.066047 3.4
   bond_coeff 1 469 1.4
   angle_coeff 1 63 120
   dihedral_coeff 1 0 7.25 0 0
   improper_coeff 1 5 180

..  container:: justify

   The pair_coeff sets the Lennard-jones parameters
   :math:`\epsilon` and :math:`\sigma` for the only type of
   atom of the simulation: carbon atom of type 1. The
   bond_coeff provides the equilibrium distance :math:`r_0` as
   well as the spring constant :math:`K` for the harmonic
   potential imposed between two neighboring carbon atoms,
   where the potential is :math:`E = K_r ( r - r_0)^2`. The
   angle_coeff gives the equilibrium angle \\(\\theta_0\\) and
   constant for the potential between three neighbors atoms :
   :math:`E = K_\theta ( \theta - \theta_0)^2`. The dihedral_coeff
   and improper_coeff give the potential for the constraints
   between 4 atoms. The file PARM.lammps need to be included in the
   simulation by adding the following line to input.lammps:

..  code-block:: bash
   :caption: *to be copied in input.lammps*

   include PARM.lammps

Separate the atoms into 3 groups
================================

..  container:: justify

   The goal of the present simulation is to impose a
   deformation to the sheet. To do so, we will isolate the
   atoms of two edges of the graphene sheets into groups, and
   the displacement will be applied to the atoms of the edge.
   Add the following lines to the input script :

..  code-block:: bash
   :caption: *to be copied in input.lammps*

   # Simulation settings

   group gcar type 1
   variable xmax equal bound(gcar,xmax)-0.5
   variable xmin equal bound(gcar,xmin)+0.5
   region rtop block ${xmax} INF INF INF INF INF
   region rbot block INF ${xmin} INF INF INF INF
   region rmid block ${xmin} ${xmax} INF INF INF INF

..  container:: justify

   The first command includes all of the atoms of type one
   (i.e. all the atoms here) in a group named gcar. Then, two
   variables are defined: :math:`x_\mathrm{max}` corresponds to
   the coordinate of the last atoms along \\(x\\) minus 0.5
   Angstroms, and :math:`x_\mathrm{min}` to the coordinate of
   the first atoms along :math:`x` plus 0.5 Angstroms. Then, 3
   regions are defined, and correspond respectively to: :math:`x < x_\mathrm{min}`, 
   :math:`x_\mathrm{min} > x > x_\mathrm{max}`, and  
   :math:`x > x_\mathrm{max}`.
   
   Finally, let us define 3 groups of atoms
   corresponding to the atoms located in each of the 3 regions,
   respectively:

..  code-block:: bash
   :caption: *to be copied in input.lammps*

   group gtop region rtop
   group gbot region rbot
   group gmid region rmid

..  container:: remark2

   **Tip** 
   
   When running a simulation, the number of atoms in each
   group is printed in the terminal (and in the log.lammps
   file). Alway control that the number of atoms is the one you expect.

Thermalisation and dynamics
===========================

..  container:: justify

   Let us specify the thermalisation and the dynamics of the
   system. Add the following lines to input.lammps:

..  code-block:: bash
   :caption: *to be copied in input.lammps*

   velocity gmid create ${T} 48455 mom yes rot yes
   fix mynve all nve
   compute Tmid gmid temp
   fix myber gmid temp/berendsen ${T} ${T} 100
   fix_modify myber temp Tmid

..  container:: justify

   The "velocity create" command gives initial velocities to
   the atoms of the group gmid, assuring an initial temperature
   of 300 K for these atoms. NVE fix is applied to all
   atoms, thus ensuring that atoms positions are recalculated
   in time, and a Berendsen thermostat is applied to the atoms
   of the group gmid only. The "fix modify" ensures that the
   fix Berendsen uses the temperature of the group gmid as an
   input, instead of the temperature of whole system. The atoms
   of the edges are not thermalised because their motion will
   be restrained in the next part of the input.

Restrain the motion of the edges
================================

..  container:: justify

   To restrain the motion of the atoms at the edges, add the
   following commands:

..  code-block:: bash
   :caption: *to be copied in input.lammps*

   fix mysf1 gtop setforce 0 NULL 0
   fix mysf2 gbot setforce 0 NULL 0
   velocity gtop set 0 NULL 0
   velocity gbot set 0 NULL 0

..  container:: justify

   The two setforce commands cancel the forces applied on the
   atoms of the two edges, respectively, during the whole
   simulation along :math:`x` and :math:`z`, and the velocity
   commands set the initial velocities along :math:`x` and
   :math:`z` to 0 for the atoms of the edges. Therefore, the
   atoms of the edges will remain immobile during the
   simulation (or they would if no other command was applied to
   them).

Data extraction
===============

..  container:: justify

   Next, in order to measure the strain and stress in the
   graphene sheet, let us extract the distance :math:`L` between
   the two edges as well as the force applied on the edges. Let
   us also add a command to print the atoms coordinates in a
   lammpstrj file every 1000 timeteps:

..  code-block:: bash
   :caption: *to be copied in input.lammps*

   variable L equal xcm(gtop,x)-xcm(gbot,x)
   fix at1 all ave/time 10 100 1000 v_L file length.dat
   fix at2 all ave/time 10 100 1000 f_mysf1[1] f_mysf2[1] file force.dat
   dump mydmp all atom 1000 dump.lammpstrj

..  container:: justify

   Notice that the values of the force on each edge are
   extracted from the fixes setforce 'mysf1' and 'mysf2', by
   calling them using `f_`, the same way variables are called
   using `v_` and computes are called using `c_`. A fix
   setforce cancels all the forces on a group of atoms every
   timestep, but allows one to extract the values of the force
   before its cancellation.

Run
===

..  container:: justify

   Let us run a small equilibration step:

..  code-block:: bash
   :caption: *to be copied in input.lammps*

   thermo 100
   thermo_modify temp Tmid

   # Run

   timestep 1.0
   run 5000

..  container:: justify

   With the thermo_modify command, we specify to LAMMPS that we
   want the temperature :math:`T_\mathrm{mid}` to be printed in
   the terminal, not the temperature of the entire system
   (because of the frozen edges, the temperature of the entire
   system is not relevant). Then, let us perform a loop. At
   each step of the loop, the edges are slightly displaced, and
   the simulation runs for a short time.

..  code-block:: bash
   :caption: *to be copied in input.lammps*

   variable var loop 10
   label loop
   displace_atoms gtop move 0.1 0 0
   displace_atoms gbot move -0.1 0 0
   run 1000
   next var
   jump input.lammps loop

..  container:: justify

   What you observe should resemble `this
   video <https://www.youtube.com/embed/o5IoCVWpPKg>`__. The
   sheet is progressively elongated, and the carbon honeycombs
   are being deformed. You can increase the number of iteration
   of the loop (variable var) to force a larger elongation.

..  container:: justify

   Always remember that what you measure and observe is only
   as good as your force field.

..  container:: justify

   With the present force field, no matter how large is the
   imposed deformation, the bonds will never break. To study
   such bond breaking, one has to use a reactive force
   field, which is done in the next tutorial (:ref:`carbon-nanotube-label`).

.. include:: ../../contact/accessfile.rst

.. include:: ../../contact/contactme.rst
